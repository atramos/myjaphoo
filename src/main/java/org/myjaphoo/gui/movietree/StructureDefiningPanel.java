/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StructureDefiningPanel.java
 *
 * Created on 23.11.2009, 16:04:29
 */

package org.myjaphoo.gui.movietree;

import org.mlsoft.common.swing.TreeNodeModel;
import org.mlsoft.structures.AbstractTreeNode;
import org.myjaphoo.gui.Commons;
import org.myjaphoo.model.grouping.GroupingDim;

import javax.swing.*;
import javax.swing.tree.TreeModel;
import java.util.ArrayList;
import java.util.List;

/**
 * @author mla
 */
public class StructureDefiningPanel extends javax.swing.JPanel {

    private MoviePanelController controller;
    private JPopupMenu popup;

    /** hold the model statically to use for all instances of structure defining panels. */
    private static TreeModel structDefModel = null;

    /** Creates new form StructureDefiningPanel */
    public StructureDefiningPanel(MoviePanelController controller, JPopupMenu popup) {
        this.controller = controller;
        initComponents();
        jXTreeStructDef.setModel(createStructureDefTreeModel());
        jXTreeStructDef.setRolloverEnabled(true);
        jXTreeStructDef.addHighlighter(Commons.ROLLOVER_ROW_HIGHLIGHTER);
        jXTreeStructDef.setCellRenderer(new StructureDefiningTreeCellRenderer());
        jXTreeStructDef.setShowsRootHandles(true);
        this.popup = popup;

    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTreeStructDef = new org.jdesktop.swingx.JXTree();

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jXTreeStructDef.setName("jXTreeStructDef"); // NOI18N
        jXTreeStructDef.setRootVisible(false);
        jXTreeStructDef.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jXTreeStructDefValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jXTreeStructDef);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jXTreeStructDefValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jXTreeStructDefValueChanged
        List<GroupingDim> hierarchy = findSelectedHierarchy(evt);
        //System.out.println(selColorType.toString());
        controller.setUserDefinedStructure(hierarchy);
        controller.fireStructureChanged();
        popup.setVisible(false);
    }//GEN-LAST:event_jXTreeStructDefValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTree jXTreeStructDef;

    // End of variables declaration//GEN-END:variables
    private void createDefNodes(DefNode root, int i) {
        if (i > 3) {
            return;
        }
        for (GroupingDim dim : GroupingDim.values()) {
            if (!isInPath(dim, root)) {
                DefNode child = new DefNode(root, dim);
                root.addChild(child);
                createDefNodes(child, i + 1);
            }
        }
    }

    private boolean isInPath(GroupingDim dim, DefNode node) {
        if (node.getDim() == dim) {
            return true;
        }
        while (node.getParent() != null) {
            node = (DefNode) node.getParent();
            if (node.getDim() == dim) {
                return true;
            }
        }
        return false;
    }

    private List<GroupingDim> findSelectedHierarchy(javax.swing.event.TreeSelectionEvent evt) {
        DefNode node = (DefNode) evt.getPath().getLastPathComponent();
        ArrayList<GroupingDim> structure = new ArrayList<GroupingDim>();
        structure.add(0, node.getDim());
        while (node.getParent() != null) {
            node = (DefNode) node.getParent();
            if (node.getDim() != null) {
                structure.add(0, node.getDim());
            }
        }
        return structure;
    }

    public static class DefNode extends AbstractTreeNode {
        private GroupingDim dim;

        public DefNode(DefNode parent, GroupingDim dim) {
            super(parent);
            this.dim = dim;
        }

        public String getName() {
            return dim != null ? getDim().getGuiName() : ""; //NOI18N
        }

        @Override
        public String toString() {

            return getName();
        }

        /**
         * @return the dim
         */
        public GroupingDim getDim() {
            return dim;
        }

        /**
         * @param dim the dim to set
         */
        public void setDim(GroupingDim dim) {
            this.dim = dim;
        }

    }

    private TreeModel createStructureDefTreeModel() {
        if (structDefModel == null) {
            DefNode root = new DefNode(null, null);

            createDefNodes(root, 0);

            structDefModel = new TreeNodeModel(root);
        }
        return structDefModel;
    }
}
