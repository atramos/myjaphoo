/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FilterEditorPanel.java
 *
 * Created on 09.05.2011, 16:27:00
 */
package org.myjaphoo.gui.filtereditor;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.fife.ui.rsyntaxtextarea.ErrorStrip;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rtextarea.RTextScrollPane;
import org.mlsoft.swing.JPopupMenuButton;
import org.myjaphoo.MyjaphooController;
import org.myjaphoo.gui.editor.rsta.CachedHints;
import org.myjaphoo.gui.editor.rsta.RSTAHelper;
import org.myjaphoo.gui.errors.ErrorUpdateEvent;
import org.myjaphoo.gui.icons.Icons;
import org.myjaphoo.gui.util.MenuABCStructurizer;
import org.myjaphoo.model.filterparser.functions.Function;
import org.myjaphoo.model.filterparser.functions.Functions;
import org.myjaphoo.model.filterparser.idents.FixIdentifier;
import org.myjaphoo.model.filterparser.idents.Qualifier;
import org.myjaphoo.model.filterparser.idents.SynonymIdentifier;
import org.myjaphoo.model.filterparser.operator.AbstractOperator;
import org.myjaphoo.model.filterparser.syntaxtree.Constant;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.*;
import java.util.List;

/**
 * @author mla
 */
public class FilterEditorPanel extends javax.swing.JPanel {

    private final static ResourceBundle localeBundle = ResourceBundle.getBundle("org/myjaphoo/gui/filtereditor/resources/FilterEditorPanel");
    private static final Comparator<Qualifier> QUAL_COMP = new Comparator<Qualifier>() {
        @Override
        public int compare(Qualifier o1, Qualifier o2) {
            return o1.getName().compareTo(o2.getName());
        }
    };
    private MyjaphooController controller;
    private RSyntaxTextArea textArea = new RSyntaxTextArea();
    private RTextScrollPane sp = new RTextScrollPane(textArea);

    private PreFilterToolbar preFilterToolbar;

    /**
     * toolbar for direct actions for the editor text window.
     */
    private JToolBar editorToolbar = new JToolBar();

    private JButton delTextEditor = new JButton();

    org.mlsoft.swing.JPopupMenuButton filterPopup = new org.mlsoft.swing.JPopupMenuButton();

    javax.swing.JButton toRealFilterButton = new JButton("to Filter");

    /**
     * Creates new form FilterEditorPanel
     */
    public FilterEditorPanel(MyjaphooController controller) {
        this.controller = controller;
        preFilterToolbar = new PreFilterToolbar(controller, this);
        initComponents();

        RSTAHelper.initAsFilterEditor(textArea);

        ErrorStrip es = new ErrorStrip(textArea);

        //sp.setMinimumSize(new Dimension(300, 25));
        //textArea.setMinimumSize(new Dimension(300, 25));

        JPanel editorWithErrorStripe = new JPanel(new BorderLayout());
        editorWithErrorStripe.add(sp);
        editorWithErrorStripe.add(es, BorderLayout.LINE_END);

        JPanel editorWithEditorToolbar = new JPanel(new BorderLayout());
        editorWithEditorToolbar.add(editorWithErrorStripe, BorderLayout.CENTER);
        editorWithEditorToolbar.add(editorToolbar, BorderLayout.WEST);

        add(editorWithEditorToolbar, java.awt.BorderLayout.CENTER);

        initEditorAdditions();
        initHelpPopup();

        initFilterPopup();

    }


    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonPopupHistory = new org.mlsoft.swing.JPopupMenuButton();
        jButtonPopupSyntaxElements = new org.mlsoft.swing.JPopupMenuButton();
        jButton1 = new javax.swing.JButton();
        jLabelFilterInfo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();

        setMinimumSize(new java.awt.Dimension(307, 55));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(791, 35));
        setLayout(new java.awt.BorderLayout());

        preFilterToolbar.setRollover(true);
        preFilterToolbar.setName("jToolBar1"); // NOI18N
        preFilterToolbar.addSeparator();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.myjaphoo.MyjaphooApp.class).getContext().getResourceMap(FilterEditorPanel.class);
        jButtonPopupHistory.setIcon(resourceMap.getIcon("jButtonPopupHistory.icon")); // NOI18N
        jButtonPopupHistory.setText(resourceMap.getString("jButtonPopupHistory.text")); // NOI18N
        jButtonPopupHistory.setToolTipText(resourceMap.getString("jButtonPopupHistory.toolTipText")); // NOI18N
        jButtonPopupHistory.setFocusable(false);
        jButtonPopupHistory.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPopupHistory.setName("jButtonPopupHistory"); // NOI18N
        jButtonPopupHistory.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editorToolbar.add(jButtonPopupHistory);

        jButtonPopupSyntaxElements.setIcon(resourceMap.getIcon("jButtonPopupSyntaxElements.icon")); // NOI18N
        jButtonPopupSyntaxElements.setText(resourceMap.getString("jButtonPopupSyntaxElements.text")); // NOI18N
        jButtonPopupSyntaxElements.setToolTipText(resourceMap.getString("jButtonPopupSyntaxElements.toolTipText")); // NOI18N
        jButtonPopupSyntaxElements.setFocusable(false);
        jButtonPopupSyntaxElements.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPopupSyntaxElements.setName("jButtonPopupSyntaxElements"); // NOI18N
        jButtonPopupSyntaxElements.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editorToolbar.add(jButtonPopupSyntaxElements);

        delTextEditor.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        delTextEditor.setToolTipText(resourceMap.getString("delTextEditor.toolTipText")); // NOI18N
        editorToolbar.add(delTextEditor);
        delTextEditor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteTextEditor(e);
            }
        });

        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setToolTipText(resourceMap.getString("jButton1.toolTipText")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        preFilterToolbar.add(jButton1);

        jLabelFilterInfo.setText(resourceMap.getString("jLabelFilterInfo.text")); // NOI18N
        jLabelFilterInfo.setName("jLabelFilterInfo"); // NOI18N
        preFilterToolbar.add(jLabelFilterInfo);

        jSeparator1.setName("jSeparator1"); // NOI18N
        preFilterToolbar.add(jSeparator1);

        filterPopup.setToolTipText(resourceMap.getString("filterPopup.tooltip"));
        filterPopup.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filterPopup.setIcon(Icons.IR_FILTER.icon);
        filterPopup.setText(resourceMap.getString("filterPopup.text"));
        filterPopup.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        preFilterToolbar.add(filterPopup);

        toRealFilterButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        toRealFilterButton.setIcon(Icons.IR_GO_DOWN.icon);

        preFilterToolbar.add(toRealFilterButton);

        toRealFilterButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                copyPreFilterToMainFilter();
            }
        });

        add(preFilterToolbar, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void copyPreFilterToMainFilter() {
        String preFilter = preFilterToolbar.createFilterExpression();
        textArea.setText(preFilter);
        controller.getFilter().setFilterPattern(preFilter);
        controller.getView().updateMovieAndThumbViews();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (evt.getSource() == jButton1) {
            textArea.setText(""); //NOI18N
            controller.getFilter().setFilterPattern(""); //NOI18N
            preFilterToolbar.clearAllFilter();
            controller.getView().updateMovieAndThumbViews();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteTextEditor(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == delTextEditor) {
            textArea.setText(""); //NOI18N
            controller.getFilter().setFilterPattern(""); //NOI18N
            controller.getView().updateMovieAndThumbViews();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonPopupHistory;
    private javax.swing.JButton jButtonPopupSyntaxElements;
    private javax.swing.JLabel jLabelFilterInfo;
    private javax.swing.JToolBar.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables

    /**
     * init additional stuff for the editor.
     * - update when return is hit
     * - update of error messages in the error box
     */
    private void initEditorAdditions() {

        // map enter to "update filter" and the default  enter action to "shift enter".
        KeyStroke enterKey = KeyStroke.getKeyStroke("ENTER");
        final Action defaultEnterAction = textArea.getActionMap().get(textArea.getInputMap().get(enterKey));

        textArea.getActionMap().put(textArea.getInputMap().get(enterKey), new AbstractAction() { //NOI18N

            @Override
            public void actionPerformed(ActionEvent e) {
                if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) {
                    defaultEnterAction.actionPerformed(e);
                } else {
                    updateViewWithCurrentFilter();
                }
            }
        });

        textArea.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (RSyntaxTextArea.PARSER_NOTICES_PROPERTY.equals(evt.getPropertyName())) {
                    List notices = textArea.getParserNotices();
                    controller.getEventBus().post(new ErrorUpdateEvent("Filter", notices));
                }
            }
        });
    }

    public void updateViewWithCurrentFilter() {
        controller.getFilter().setFilterPattern(textArea.getText());
        controller.getFilter().setPreFilterPattern(preFilterToolbar.createFilterExpression());
        controller.getView().updateViewAfterFilterBrickChange();
    }


    public void setFilter(String filterExpression) {
        textArea.setText(filterExpression);

    }

    public void setPreFilter(String preFilter) {
        preFilterToolbar.updateFilterBricks(preFilter);
    }

    public void setFilterInfoText(String filterInfoText) {
        jLabelFilterInfo.setText(filterInfoText);
    }

    private JPopupMenuButton getPopupButton() {
        return (JPopupMenuButton) jButtonPopupHistory;
    }

    public void setLastFilters(Collection<String> lastfilters) {
        JPopupMenu menu = new JPopupMenu();
        for (final String filterExpr : lastfilters) {
            menu.add(new AbstractAction(filterExpr) {

                @Override
                public void actionPerformed(ActionEvent e) {
                    //jEditorPane1.setText(filterExpr);
                    controller.getFilter().setFilterPattern(filterExpr);
                    controller.getView().updateMovieAndThumbViews();
                }
            });
        }
        getPopupButton().setPopupmenu(menu);
    }

    private void initHelpPopup() {
        JPopupMenuButton button = (JPopupMenuButton) jButtonPopupSyntaxElements;
        JPopupMenu popuphelpmenu = new JPopupMenu();
        JMenu subm = new JMenu(localeBundle.getString("IDENTIFIER"));
        JMenu exif = new JMenu(localeBundle.getString("EXIF"));
        subm.add(exif);
        popuphelpmenu.add(subm);
        for (final Qualifier ident : Qualifier.getList()) {
            final AbstractAction identhelpmenuentry = createSyntaxHelpAction(ident.getName(), ident.getSelfShortDescription());
            if (ident.getName().startsWith("exif")) {
                exif.add(identhelpmenuentry);
            } else {
                subm.add(identhelpmenuentry);
            }
        }
        subm = new JMenu(localeBundle.getString("OPERATOR"));
        popuphelpmenu.add(subm);
        for (final AbstractOperator op : AbstractOperator.getList()) {
            subm.add(createSyntaxHelpAction(op.getSymbol(), op.getSelfShortDescription()));
        }
        subm = new JMenu(localeBundle.getString("FUNCTION"));
        popuphelpmenu.add(subm);
        for (final Function function : Function.getList()) {
            subm.add(createSyntaxHelpAction(function.getName(), function.getSelfShortDescription()));
        }
        subm = new JMenu(localeBundle.getString("CONSTANT"));
        popuphelpmenu.add(subm);
        for (final Constant constant : Constant.getAllConstants()) {
            subm.add(createSyntaxHelpAction(constant.getSymbol(), constant.getSelfShortDescription()));
        }
        button.setPopupmenu(popuphelpmenu);
    }

    private void initFilterPopup() {
        JPopupMenu pm = new JPopupMenu();

        pm.add(new AbstractAction("filter bookmark") {
            @Override
            public void actionPerformed(ActionEvent e) {
                preFilterToolbar.addBookmarkFilter(null);
            }
        });

        pm.add(new AbstractAction("filter text") {
            @Override
            public void actionPerformed(ActionEvent e) {
                preFilterToolbar.addTextFilter();
            }
        });

        pm.add(new AbstractAction("filter tag") {
            @Override
            public void actionPerformed(ActionEvent e) {
                preFilterToolbar.addTagFilter();
            }
        });
        pm.addSeparator();

        JMenu subm = new JMenu(localeBundle.getString("IDENTIFIER"));
        JMenu exif = new JMenu(localeBundle.getString("EXIF"));
        pm.add(subm);
        pm.add(exif);
        MenuABCStructurizer structurizer = new MenuABCStructurizer(false);

        ArrayList<Qualifier> qualList = new ArrayList<>(Qualifier.getList());
        Collections.sort(qualList, QUAL_COMP);
        for (final Qualifier ident : qualList) {
            if (ident instanceof FixIdentifier && !(ident instanceof SynonymIdentifier)) {
                final AbstractAction identhelpmenuentry = createFilterAction((FixIdentifier) ident);
                if (ident.getName().startsWith("exif")) {
                    structurizer.add(identhelpmenuentry, StringUtils.remove(ident.getName(), "exif_"), null);
                } else {
                    subm.add(identhelpmenuentry);
                }
            }
        }
        structurizer.structurize(exif, 20);

        JMenu attrm = new JMenu(localeBundle.getString("ATTRIBUTES"));
        pm.add(attrm);
        for (final String key : CachedHints.getEntryAttrKeys()) {
            attrm.add(new AbstractAction("filter entry attr " + key) {
                @Override
                public void actionPerformed(ActionEvent e) {
                    preFilterToolbar.addEntryAttrFilter(Functions.ENTRYATTR, key);
                }
            });
        }

        for (final String key : CachedHints.getTagAttrKeys()) {
            attrm.add(new AbstractAction("filter tag attr " + key) {
                @Override
                public void actionPerformed(ActionEvent e) {
                    preFilterToolbar.addEntryAttrFilter(Functions.TAGATTR, key);
                }
            });
        }

        for (final String key : CachedHints.getMetaTagAttrKeys()) {
            attrm.add(new AbstractAction("filter metatag attr " + key) {
                @Override
                public void actionPerformed(ActionEvent e) {
                    preFilterToolbar.addEntryAttrFilter(Functions.METATAGATTR, key);
                }
            });
        }

        filterPopup.setPopupmenu(pm);
    }

    private AbstractAction createFilterAction(final FixIdentifier ident) {
        return new AbstractAction(ashtml(ident.getName(), ident.getSelfShortDescription())) {

            @Override
            public void actionPerformed(ActionEvent e) {
                preFilterToolbar.addIdentifierFilter(ident);
            }
        };
    }

    private AbstractAction createSyntaxHelpAction(final String name, String descr) {
        return new AbstractAction(ashtml(name, descr)) {

            @Override
            public void actionPerformed(ActionEvent e) {
                int pos = textArea.getCaretPosition();
                try {
                    textArea.getDocument().insertString(pos, name, null);
                } catch (BadLocationException ex) {
                    LoggerFactory.getLogger(FilterEditorPanel.class.getName()).error("bad location!", ex);
                }
            }
        };
    }

    private String ashtml(String name, String selfDescription) {

        return "<html><b>" + StringEscapeUtils.escapeHtml(name) + "</b> : " + StringEscapeUtils.escapeHtml(selfDescription) + "</html>"; //NOI18N
    }
}
