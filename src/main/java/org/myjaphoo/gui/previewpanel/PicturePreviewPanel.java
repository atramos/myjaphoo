/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PicturePreviewPanel.java
 *
 * Created on 25.03.2010, 12:48:42
 */
package org.myjaphoo.gui.previewpanel;

import org.jdesktop.swingx.JXImageView;
import org.mlsoft.eventbus.Subscribe;
import org.myjaphoo.MovieNode;
import org.myjaphoo.MyjaphooController;
import org.myjaphoo.gui.movietree.AbstractLeafNode;
import org.myjaphoo.gui.movietree.events.SelectedNodeChangeEvent;
import org.myjaphoo.gui.panel.AbstractEmbeddablePanel;
import org.myjaphoo.gui.util.ThumbLoader;
import org.myjaphoo.model.FileType;
import org.myjaphoo.model.logic.FileSubstitutionImpl;
import org.myjaphoo.model.logic.MyjaphooDB;
import org.slf4j.LoggerFactory;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.concurrent.Callable;


/**
 * preview panel for thumbs (movie nodes) or pictures (picture nodes).
 * @author lang
 */
public class PicturePreviewPanel extends AbstractEmbeddablePanel {


    private final static ResourceBundle localeBundle = ResourceBundle.getBundle("org/myjaphoo/gui/previewpanel/resources/PicturePreviewPanel");


    private FileSubstitutionImpl fileSubstitution = new FileSubstitutionImpl();
    private Long movieId;
    private ThumbLoader thumbLoader = new ThumbLoader(MyjaphooDB.singleInstance().getConnection());
    /** the current selected thumb. */
    private int currThumb;
    private int numOfMovieThumbs;
    private int percentage = 100;

    private MyjaphooController controller;
    
    /** Creates new form PicturePreviewPanel */
    public PicturePreviewPanel(MyjaphooController controller) {
        this.controller = controller;
        controller.getEventBus().register(this);
        initComponents();
        SpinnerNumberModel sm = new SpinnerNumberModel(100, 10, 200, 10);

        jSpinner1.setModel(sm);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jSpinner1 = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButtonPrev = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jPanel1 = new org.jdesktop.swingx.JXImageView();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        jSpinner1.setName("jSpinner1"); // NOI18N
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jToolBar1.add(jSpinner1);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jToolBar1.add(jSeparator1);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.myjaphoo.MyjaphooApp.class).getContext().getResourceMap(PicturePreviewPanel.class);
        jButtonPrev.setIcon(resourceMap.getIcon("jButtonPrev.icon")); // NOI18N
        jButtonPrev.setText(resourceMap.getString("jButtonPrev.text")); // NOI18N
        jButtonPrev.setFocusable(false);
        jButtonPrev.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPrev.setName("jButtonPrev"); // NOI18N
        jButtonPrev.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrevActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonPrev);

        jButtonNext.setIcon(resourceMap.getIcon("jButtonNext.icon")); // NOI18N
        jButtonNext.setText(resourceMap.getString("jButtonNext.text")); // NOI18N
        jButtonNext.setFocusable(false);
        jButtonNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNext.setName("jButtonNext"); // NOI18N
        jButtonNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonNext);

        add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        if (evt.getSource() == jSpinner1) {
            percentage = Integer.parseInt(jSpinner1.getModel().getValue().toString());
            ((JXImageView) jPanel1).setScale(percentage / 100.0d);
        }
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        displayThumb(currThumb++);
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrevActionPerformed
        displayThumb(currThumb--);
    }//GEN-LAST:event_jButtonPrevActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrev;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return localeBundle.getString("PREVIEW");
    }

    @Override
    public void refreshView() {
    }

    @Override
    public void clearView() {
    }

    private void handlePictureNode(AbstractLeafNode node) {
        try {
            movieId = null; // reset movie mode marker
            String path = fileSubstitution.locateFileOnDrive(node.getCanonicalPath());
            if (path == null) {
                return;
            }
            File file = new File(path);
            if (!file.exists()) {
                return;
            }
            ((JXImageView) jPanel1).setImage(file.toURI().toURL());
            ((JXImageView) jPanel1).setScale(percentage / 100.0d);
        } catch (IOException ex) {
            LoggerFactory.getLogger(PicturePreviewPanel.class.getName()).error("error", ex); //NOI18N

        }
    }

    private void handleMovieNode(AbstractLeafNode node) {
        // reset to first thumb:
        currThumb = 0;
        displayFirstTimeThumb(node, currThumb);
    }

    private void displayFirstTimeThumb(AbstractLeafNode node, int currThumb) {
        movieId = ((MovieNode) node).getMovieEntry().getId();
        numOfMovieThumbs = thumbLoader.numOfThumbs(movieId);
        BufferedImage thumb = thumbLoader.load(movieId, currThumb);
        if (thumb != null) {
            ((JXImageView) jPanel1).setImage(thumb);
            ((JXImageView) jPanel1).setScale(percentage / 100.0d);
        }
    }

    private void displayThumb(int i) {
        // this works only for movies:
        if (movieId == null) {
            return;
        }

        if (i >= numOfMovieThumbs) {
            i = 0;
        } else if (i < 0) {
            i = numOfMovieThumbs - 1;
        }
        currThumb = i;
        BufferedImage thumb = thumbLoader.load(movieId, currThumb);
        if (thumb != null) {
            ((JXImageView) jPanel1).setImage(thumb);
            ((JXImageView) jPanel1).setScale(percentage / 100.0d);
        }
    }

    public class URLImageLoader implements Callable<Image> {

        private URL url;

        public URLImageLoader(URL url) {
            url.getClass(); //null check
            this.url = url;
        }

        public Image call() throws Exception {
            return ImageIO.read(url);
        }
    }

    public void displayImage(AbstractLeafNode node) {

        if (node.is(FileType.Pictures)) {
            handlePictureNode(node);
        } else {
            handleMovieNode(node);
                int percentage = Integer.parseInt(jSpinner1.getModel().getValue().toString());
                if (percentage != 100) {
                   ((JXImageView) jPanel1).setScale(percentage / 100.0d);
                }

        }
    }
    
    @Subscribe(onETD=true)
    public void selectionInMovieTreeHashChanged(SelectedNodeChangeEvent event) {
        
        // if a single movie node is selected, then display its picture or thumbnails:
        if (event.getAbstractMovieTreeNode() instanceof AbstractLeafNode) {
            displayImage((AbstractLeafNode) event.getAbstractMovieTreeNode());
        }
    }
}
